{
	"info": {
		"_postman_id": "46865fae-acd6-4cbf-87c9-44675e87f1d8",
		"name": "Mock2Full",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24760695"
	},
	"item": [
		{
			"name": "register_Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Check that the response contains the userId and username\r",
							"pm.test(\"Response contains the userId and username\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property('userId');\r",
							"  pm.expect(jsonData).to.have.property('username');\r",
							"});\r",
							"\r",
							"pm.test(\"Save the response NormalUser username as an environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"NormalUser\", jsonData.username);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/register",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"register"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/register' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "register_Valid Admin User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"// Check that the response contains the userId and username\r",
							"pm.test(\"Response contains the userId and username\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property('userId');\r",
							"  pm.expect(jsonData).to.have.property('username');\r",
							"});\r",
							"\r",
							"pm.test(\"Save the response AdminUser username as an environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"AdminUser\", jsonData.username);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/register",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"register"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/register' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "register_Invalid_userExist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 409\", function () {\r",
							"  pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the error 'User already exists'\", function () {\r",
							"  var responseData = pm.response.json();\r",
							"  pm.expect(responseData.error).to.equal('User already exists');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{NormalUser}}\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/register",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"register"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/register' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "register_Invalid_missingFields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response error message indicates required fields\", function () {\r",
							"    var responseError = pm.response.json().error;\r",
							"    pm.expect(responseError).to.include(\"Username\");\r",
							"    pm.expect(responseError).to.include(\"password\");\r",
							"    pm.expect(responseError).to.include(\"role\");\r",
							"});\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user3\",\r\n    \"password\": \"\",\r\n    \"role\": \"sdsd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/register",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"register"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/register' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\",\r\n    \"role\": \"admin\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "login_valid AdminUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Save the response token as an environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"});\r",
							"\r",
							"console.log(\"Token: \", pm.environment.get(\"token\"));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{AdminUser}}\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/login",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "login_valid NormalUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Save the response token for NormalUser as an environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"tokenNormalUser\", jsonData.token);\r",
							"});\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{NormalUser}}\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/login",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "login_InValid_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response error is 'Invalid credentials'\", function () {\r",
							"  var responseData = pm.response.json();\r",
							"  pm.expect(responseData.error).to.equal('Invalid credentials');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{NormalUser}}\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/login",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "login_InValid_ WrongUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response error is 'User not found'\", function () {\r",
							"  var responseData = pm.response.json();\r",
							"  pm.expect(responseData.error).to.equal('User not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/login",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"username\": \"user1\",\r\n    \"password\": \"password123\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "addProduct_Valid_Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check the response status code\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test to check if the response has a productId with an integer value\r",
							"pm.test(\"ProductId is an integer value\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.productId).to.be.a('number').and.to.satisfy(Number.isInteger);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random integer between 1 and 10000 (or any range you prefer)\r",
							"const randomProductId = Math.floor(Math.random() * 10000) + 1;\r",
							"\r",
							"// Set this random productId as an environment variable\r",
							"pm.environment.set(\"productId\", randomProductId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"productId\": {{productId}},\r\n  \"name\": \"Laptop\",\r\n  \"stock\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/addProduct",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"addProduct"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/addProduct' \\\r\n--header 'Authorization: Bearer <YOUR_TOKEN>' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}'"
			},
			"response": []
		},
		{
			"name": "addProduct_InValid_NormalUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response error should be equal to a string\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).to.equal('Access denied');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenNormalUser}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/addProduct",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"addProduct"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/addProduct' \\\r\n--header 'Authorization: Bearer <YOUR_TOKEN>' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}'"
			},
			"response": []
		},
		{
			"name": "addProduct_InValid sameProduct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check the response status code\r",
							"pm.test(\"Response status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"// Test to check for response error 'Product already exists'\r",
							"pm.test(\"Response error is 'Product already exists'\", function () {\r",
							"    pm.expect(pm.response.json().error).to.equal('Product already exists');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": {{productId}},\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/addProduct",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"addProduct"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/addProduct' \\\r\n--header 'Authorization: Bearer <YOUR_TOKEN>' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}'"
			},
			"response": []
		},
		{
			"name": "addProduct_InValid noProductId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check the response status code\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message 'Product ID must be an integer' is present in the response\", function () {\r",
							"    pm.expect(pm.response.json().errors[0].msg).to.equal(\"Product ID must be an integer\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"\",\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/addProduct",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"addProduct"
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/addProduct' \\\r\n--header 'Authorization: Bearer <YOUR_TOKEN>' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}'"
			},
			"response": []
		},
		{
			"name": "FechProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Products array is not empty\", function () {\r",
							"  pm.expect(pm.response.json().products.length).to.be.greaterThan(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/products?page=0&limit=0",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "0"
						}
					]
				},
				"description": "Generated from cURL: curl --location --request POST 'http://localhost:3000/addProduct' \\\r\n--header 'Authorization: Bearer <YOUR_TOKEN>' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"productId\": 101,\r\n    \"name\": \"Laptop\",\r\n    \"stock\": 50\r\n}'"
			},
			"response": []
		}
	]
}